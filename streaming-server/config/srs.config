# streaming-server/config/srs.config
# Complete SRS Configuration for gRPC Integration

# Basic server settings
listen              1935;
max_connections     1000;
daemon              off;
srs_log_tank        console;
srs_log_level       info;
pid                 /usr/local/srs/objs/srs.pid;

# HTTP server for HLS delivery and API
http_server {
    enabled         on;
    listen          8080;
    dir             /usr/local/srs/objs/nginx/html;
    crossdomain     on;

    # CORS settings for web players
    http_ctx {
        "/live/*.m3u8" {
            header "Access-Control-Allow-Origin" "*";
            header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
            header "Access-Control-Allow-Headers" "Content-Type";
            header "Cache-Control" "no-cache, no-store, must-revalidate";
            header "Pragma" "no-cache";
            header "Expires" "0";
        }
        "/live/*.ts" {
            header "Access-Control-Allow-Origin" "*";
            header "Access-Control-Allow-Methods" "GET";
            header "Cache-Control" "max-age=3";
        }
    }
}

# HTTP API for statistics and control
http_api {
    enabled         on;
    listen          1985;
    crossdomain     on;

    # Authentication for API access
    raw_api {
        enabled             on;
        allow_reload        on;
        allow_query         on;
        allow_update        on;
    }
}

# Statistics for monitoring
stats {
    network         0;
    disk            sda vda xvda xvdb;
}

# Main streaming vhost configuration
vhost __defaultVhost__ {
    # Enable all streaming features
    enabled         on;

    # Low latency HLS settings
    hls {
        enabled         on;
        hls_path        /usr/local/srs/objs/nginx/html/live;
        hls_fragment    1;          # 1 second segments for low latency
        hls_window      3;          # Only keep 3 segments in playlist
        hls_m3u8_file   [stream].m3u8;
        hls_ts_file     [stream]-[seq].ts;
        hls_cleanup     on;
        hls_dispose     10;         # Clean up after 10 seconds
        hls_wait_keyframe   on;     # Wait for keyframe for better quality

        # Low latency optimizations
        hls_ctx {
            enabled             on;
            hls_segment         1;
            hls_window          3;
            hls_cleanup         on;
        }
    }

    # Optional: HTTP-FLV for even lower latency
    http_remux {
        enabled     on;
        mount       [vhost]/[app]/[stream].flv;
    }

    # Optional: DASH support
    dash {
        enabled         off;  # Enable if needed
        dash_path       /usr/local/srs/objs/nginx/html/dash;
        dash_fragment   1;
        dash_window     3;
        dash_cleanup    on;
    }

    # DVR (Digital Video Recording) - optional
    dvr {
        enabled         on;
        dvr_path        /usr/local/srs/objs/nginx/html/recordings/[app]/[stream]/[2006]/[01]/[02]/[15].[04].[05].mp4;
        dvr_plan        session;    # Record per session
        dvr_duration    30;         # Split recordings every 30 minutes
        dvr_wait_keyframe   on;

        # Only record if specifically requested
        dvr_apply       "publish and play";
    }

    # Stream authentication and callbacks to Stream Management Service
    http_hooks {
        enabled         on;

        # Authentication callback - called when stream starts publishing
        on_publish      http://stream-management:8080/rtmp/auth;

        # Stream lifecycle callbacks
        on_publish_done http://stream-management:8080/rtmp/started;
        on_unpublish    http://stream-management:8080/rtmp/ended;

        # Recording callbacks
        on_dvr          http://stream-management:8080/rtmp/recorded;

        # Optional: Play callbacks for viewer tracking
        # on_play         http://stream-management:8080/rtmp/view_started;
        # on_stop         http://stream-management:8080/rtmp/view_ended;
    }

    # Security settings
    security {
        # Deny publishing from certain IPs if needed
        # deny            publish 192.168.1.100;

        # Allow only specific applications
        allow           publish all;
        allow           play all;
    }

    # Stream transcoding (optional - CPU intensive)
    transcode {
        enabled     off;  # Enable only if you need multiple qualities
        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;

        # Example: Create multiple bitrates
        engine transcoding_720p {
            enabled         off;
            vfilter {
                vf                  'scale=1280:720';
            }
            vcodec              libx264;
            vbitrate            2000;        # 2Mbps
            vfps                25;
            vwidth              1280;
            vheight             720;
            vthreads            4;
            vprofile            baseline;
            vpreset             ultrafast;   # For low latency

            acodec              aac;
            abitrate            128;         # 128Kbps
            asample_rate        44100;
            achannels           2;

            output              rtmp://127.0.0.1:[port]/[app]/[stream]_720p;
        }
    }

    # Forward stream to other servers if needed
    forward {
        enabled         off;
        # destination     rtmp://backup-server:1935/live/;
    }

    # Performance optimizations for low latency
    tcp_nodelay     on;
    min_latency     on;

    # Reduce buffer sizes for lower latency
    play {
        gop_cache       off;    # Disable GOP cache
        queue_length    10;     # Small queue
        mw_latency      100;    # 100ms max latency
    }

    # Publish settings
    publish {
        mr              off;    # Disable MR(merged-read)
        mr_latency      350;    # Lower MR latency
        firstpkt_timeout    20000;  # 20s timeout for first packet
        normal_timeout      5000;   # 5s timeout for normal packets
    }

    # Cluster settings (if running multiple SRS instances)
    cluster {
        mode            local;      # local, remote, or origin
        origin_cluster  off;
        token_traverse  off;
        vhost           __defaultVhost__;
    }

    # Bandwidth testing (optional)
    bandcheck {
        enabled         off;
        key             35c9b402c12a7246868752e2878f7e0e;
        interval        30;
        limit_kbps      4000;
    }

    # Edge settings (for CDN setup)
    # edge {
    #     enabled         on;
    #     origin          127.0.0.1:1935;
    # }
}

# Additional vhosts for different purposes
vhost lowlatency.example.com {
    # Ultra low latency configuration
    enabled         on;

    hls {
        enabled         on;
        hls_path        /usr/local/srs/objs/nginx/html/lowlatency;
        hls_fragment    0.5;        # 500ms segments
        hls_window      2;          # Only 2 segments
        hls_m3u8_file   [stream].m3u8;
        hls_ts_file     [stream]-[seq].ts;
        hls_cleanup     on;
        hls_dispose     5;
    }

    # Same callbacks as default vhost
    http_hooks {
        enabled         on;
        on_publish      http://stream-management:8080/rtmp/auth;
        on_publish_done http://stream-management:8080/rtmp/started;
        on_unpublish    http://stream-management:8080/rtmp/ended;
    }

    tcp_nodelay     on;
    min_latency     on;

    play {
        gop_cache       off;
        queue_length    5;
        mw_latency      50;     # Even lower latency
    }
}

# Heartbeat for monitoring
heartbeat {
    enabled         off;
    interval        30;
    url             http://stream-management:8080/api/v1/heartbeat;
    device_id       srs-media-server-01;
}

# Additional global settings
srs_log_file        ./objs/srs.log;
ff_log_dir          ./objs;

# Daemon settings
daemon              off;
utc_time            off;
work_dir            ./;

# Performance tuning
max_connections     1000;
listen              1935;

# Security
security {
    srs_log_level   info;  # Don't log debug info in production
}