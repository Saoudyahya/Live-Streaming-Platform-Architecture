// proto/analytics/analytics_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: analytics/analytics_service.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_TrackEvent_FullMethodName         = "/analytics.AnalyticsService/TrackEvent"
	AnalyticsService_GetUserAnalytics_FullMethodName   = "/analytics.AnalyticsService/GetUserAnalytics"
	AnalyticsService_GetStreamAnalytics_FullMethodName = "/analytics.AnalyticsService/GetStreamAnalytics"
	AnalyticsService_GetRecommendations_FullMethodName = "/analytics.AnalyticsService/GetRecommendations"
	AnalyticsService_GetPlatformMetrics_FullMethodName = "/analytics.AnalyticsService/GetPlatformMetrics"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	TrackEvent(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*TrackEventResponse, error)
	GetUserAnalytics(ctx context.Context, in *GetUserAnalyticsRequest, opts ...grpc.CallOption) (*GetUserAnalyticsResponse, error)
	GetStreamAnalytics(ctx context.Context, in *GetStreamAnalyticsRequest, opts ...grpc.CallOption) (*GetStreamAnalyticsResponse, error)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error)
	GetPlatformMetrics(ctx context.Context, in *GetPlatformMetricsRequest, opts ...grpc.CallOption) (*GetPlatformMetricsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) TrackEvent(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*TrackEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackEventResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_TrackEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetUserAnalytics(ctx context.Context, in *GetUserAnalyticsRequest, opts ...grpc.CallOption) (*GetUserAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetUserAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetStreamAnalytics(ctx context.Context, in *GetStreamAnalyticsRequest, opts ...grpc.CallOption) (*GetStreamAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetStreamAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPlatformMetrics(ctx context.Context, in *GetPlatformMetricsRequest, opts ...grpc.CallOption) (*GetPlatformMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPlatformMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	TrackEvent(context.Context, *TrackEventRequest) (*TrackEventResponse, error)
	GetUserAnalytics(context.Context, *GetUserAnalyticsRequest) (*GetUserAnalyticsResponse, error)
	GetStreamAnalytics(context.Context, *GetStreamAnalyticsRequest) (*GetStreamAnalyticsResponse, error)
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error)
	GetPlatformMetrics(context.Context, *GetPlatformMetricsRequest) (*GetPlatformMetricsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) TrackEvent(context.Context, *TrackEventRequest) (*TrackEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackEvent not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetUserAnalytics(context.Context, *GetUserAnalyticsRequest) (*GetUserAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetStreamAnalytics(context.Context, *GetStreamAnalyticsRequest) (*GetStreamAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPlatformMetrics(context.Context, *GetPlatformMetricsRequest) (*GetPlatformMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_TrackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).TrackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_TrackEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).TrackEvent(ctx, req.(*TrackEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetUserAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetUserAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetUserAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetUserAnalytics(ctx, req.(*GetUserAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetStreamAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetStreamAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetStreamAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetStreamAnalytics(ctx, req.(*GetStreamAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPlatformMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPlatformMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPlatformMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPlatformMetrics(ctx, req.(*GetPlatformMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackEvent",
			Handler:    _AnalyticsService_TrackEvent_Handler,
		},
		{
			MethodName: "GetUserAnalytics",
			Handler:    _AnalyticsService_GetUserAnalytics_Handler,
		},
		{
			MethodName: "GetStreamAnalytics",
			Handler:    _AnalyticsService_GetStreamAnalytics_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _AnalyticsService_GetRecommendations_Handler,
		},
		{
			MethodName: "GetPlatformMetrics",
			Handler:    _AnalyticsService_GetPlatformMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/analytics_service.proto",
}
