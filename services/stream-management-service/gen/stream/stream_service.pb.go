// proto/stream/stream_service.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: stream/stream_service.proto

package stream

import (
	common "github.com/Saoudyahya/Live-Streaming-Platform-Architecture/services/stream-management-service/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamStatus int32

const (
	StreamStatus_STREAM_PENDING StreamStatus = 0
	StreamStatus_STREAM_LIVE    StreamStatus = 1
	StreamStatus_STREAM_ENDED   StreamStatus = 2
	StreamStatus_STREAM_ERROR   StreamStatus = 3
	StreamStatus_STREAM_PAUSED  StreamStatus = 4
)

// Enum value maps for StreamStatus.
var (
	StreamStatus_name = map[int32]string{
		0: "STREAM_PENDING",
		1: "STREAM_LIVE",
		2: "STREAM_ENDED",
		3: "STREAM_ERROR",
		4: "STREAM_PAUSED",
	}
	StreamStatus_value = map[string]int32{
		"STREAM_PENDING": 0,
		"STREAM_LIVE":    1,
		"STREAM_ENDED":   2,
		"STREAM_ERROR":   3,
		"STREAM_PAUSED":  4,
	}
)

func (x StreamStatus) Enum() *StreamStatus {
	p := new(StreamStatus)
	*p = x
	return p
}

func (x StreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_stream_service_proto_enumTypes[0].Descriptor()
}

func (StreamStatus) Type() protoreflect.EnumType {
	return &file_stream_stream_service_proto_enumTypes[0]
}

func (x StreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStatus.Descriptor instead.
func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{0}
}

// Stream key validation (called by media server)
type ValidateStreamKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamKey     string                 `protobuf:"bytes,1,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	IpAddress     string                 `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	AppName       string                 `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateStreamKeyRequest) Reset() {
	*x = ValidateStreamKeyRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateStreamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateStreamKeyRequest) ProtoMessage() {}

func (x *ValidateStreamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateStreamKeyRequest.ProtoReflect.Descriptor instead.
func (*ValidateStreamKeyRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{0}
}

func (x *ValidateStreamKeyRequest) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

func (x *ValidateStreamKeyRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ValidateStreamKeyRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type ValidateStreamKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsValid       bool                   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Permissions   *StreamPermissions     `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateStreamKeyResponse) Reset() {
	*x = ValidateStreamKeyResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateStreamKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateStreamKeyResponse) ProtoMessage() {}

func (x *ValidateStreamKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateStreamKeyResponse.ProtoReflect.Descriptor instead.
func (*ValidateStreamKeyResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateStreamKeyResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidateStreamKeyResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateStreamKeyResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ValidateStreamKeyResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ValidateStreamKeyResponse) GetPermissions() *StreamPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type StreamPermissions struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CanStream          bool                   `protobuf:"varint,1,opt,name=can_stream,json=canStream,proto3" json:"can_stream,omitempty"`
	CanRecord          bool                   `protobuf:"varint,2,opt,name=can_record,json=canRecord,proto3" json:"can_record,omitempty"`
	MaxBitrate         int32                  `protobuf:"varint,3,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`
	MaxDurationMinutes int32                  `protobuf:"varint,4,opt,name=max_duration_minutes,json=maxDurationMinutes,proto3" json:"max_duration_minutes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StreamPermissions) Reset() {
	*x = StreamPermissions{}
	mi := &file_stream_stream_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPermissions) ProtoMessage() {}

func (x *StreamPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPermissions.ProtoReflect.Descriptor instead.
func (*StreamPermissions) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{2}
}

func (x *StreamPermissions) GetCanStream() bool {
	if x != nil {
		return x.CanStream
	}
	return false
}

func (x *StreamPermissions) GetCanRecord() bool {
	if x != nil {
		return x.CanRecord
	}
	return false
}

func (x *StreamPermissions) GetMaxBitrate() int32 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *StreamPermissions) GetMaxDurationMinutes() int32 {
	if x != nil {
		return x.MaxDurationMinutes
	}
	return 0
}

// Stream management
type CreateStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamKey     string                 `protobuf:"bytes,2,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata      *StreamMetadata        `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateStreamRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateStreamRequest) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

func (x *CreateStreamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateStreamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateStreamRequest) GetMetadata() *StreamMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StreamId      string                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Stream        *Stream                `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateStreamResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateStreamResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CreateStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type UpdateStreamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StreamId        string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Status          StreamStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=stream.StreamStatus" json:"status,omitempty"`
	Metadata        *StreamMetadata        `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ViewerCount     int64                  `protobuf:"varint,4,opt,name=viewer_count,json=viewerCount,proto3" json:"viewer_count,omitempty"`
	DurationSeconds int64                  `protobuf:"varint,5,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UpdateStreamRequest) GetStatus() StreamStatus {
	if x != nil {
		return x.Status
	}
	return StreamStatus_STREAM_PENDING
}

func (x *UpdateStreamRequest) GetMetadata() *StreamMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateStreamRequest) GetViewerCount() int64 {
	if x != nil {
		return x.ViewerCount
	}
	return 0
}

func (x *UpdateStreamRequest) GetDurationSeconds() int64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

type UpdateStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Stream        *Stream                `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamResponse) Reset() {
	*x = UpdateStreamResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamResponse) ProtoMessage() {}

func (x *UpdateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateStreamResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Stream        *Stream                `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetStreamResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type GetActiveStreamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveStreamsRequest) Reset() {
	*x = GetActiveStreamsRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveStreamsRequest) ProtoMessage() {}

func (x *GetActiveStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveStreamsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveStreamsRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetActiveStreamsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetActiveStreamsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type GetActiveStreamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Streams       []*Stream              `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
	NextCursor    string                 `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveStreamsResponse) Reset() {
	*x = GetActiveStreamsResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveStreamsResponse) ProtoMessage() {}

func (x *GetActiveStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveStreamsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveStreamsResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetActiveStreamsResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetActiveStreamsResponse) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *GetActiveStreamsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetActiveStreamsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type EndStreamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StreamId        string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DurationSeconds int64                  `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	RecordingPath   string                 `protobuf:"bytes,3,opt,name=recording_path,json=recordingPath,proto3" json:"recording_path,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EndStreamRequest) Reset() {
	*x = EndStreamRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndStreamRequest) ProtoMessage() {}

func (x *EndStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndStreamRequest.ProtoReflect.Descriptor instead.
func (*EndStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{11}
}

func (x *EndStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *EndStreamRequest) GetDurationSeconds() int64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *EndStreamRequest) GetRecordingPath() string {
	if x != nil {
		return x.RecordingPath
	}
	return ""
}

type EndStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndStreamResponse) Reset() {
	*x = EndStreamResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndStreamResponse) ProtoMessage() {}

func (x *EndStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndStreamResponse.ProtoReflect.Descriptor instead.
func (*EndStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{12}
}

func (x *EndStreamResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RecordingCompletedRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StreamId        string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	RecordingPath   string                 `protobuf:"bytes,2,opt,name=recording_path,json=recordingPath,proto3" json:"recording_path,omitempty"`
	FileSizeBytes   int64                  `protobuf:"varint,3,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	DurationSeconds int64                  `protobuf:"varint,4,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecordingCompletedRequest) Reset() {
	*x = RecordingCompletedRequest{}
	mi := &file_stream_stream_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingCompletedRequest) ProtoMessage() {}

func (x *RecordingCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingCompletedRequest.ProtoReflect.Descriptor instead.
func (*RecordingCompletedRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{13}
}

func (x *RecordingCompletedRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *RecordingCompletedRequest) GetRecordingPath() string {
	if x != nil {
		return x.RecordingPath
	}
	return ""
}

func (x *RecordingCompletedRequest) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

func (x *RecordingCompletedRequest) GetDurationSeconds() int64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

type RecordingCompletedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecordingUrl  string                 `protobuf:"bytes,2,opt,name=recording_url,json=recordingUrl,proto3" json:"recording_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingCompletedResponse) Reset() {
	*x = RecordingCompletedResponse{}
	mi := &file_stream_stream_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingCompletedResponse) ProtoMessage() {}

func (x *RecordingCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingCompletedResponse.ProtoReflect.Descriptor instead.
func (*RecordingCompletedResponse) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{14}
}

func (x *RecordingCompletedResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RecordingCompletedResponse) GetRecordingUrl() string {
	if x != nil {
		return x.RecordingUrl
	}
	return ""
}

// Data structures
type Stream struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamKey       string                 `protobuf:"bytes,3,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	Title           string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status          StreamStatus           `protobuf:"varint,6,opt,name=status,proto3,enum=stream.StreamStatus" json:"status,omitempty"`
	StartedAt       *common.Timestamp      `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt         *common.Timestamp      `protobuf:"bytes,8,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	DurationSeconds int64                  `protobuf:"varint,9,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	ViewerCount     int64                  `protobuf:"varint,10,opt,name=viewer_count,json=viewerCount,proto3" json:"viewer_count,omitempty"`
	RecordingUrl    string                 `protobuf:"bytes,11,opt,name=recording_url,json=recordingUrl,proto3" json:"recording_url,omitempty"`
	Metadata        *StreamMetadata        `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt       *common.Timestamp      `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *common.Timestamp      `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_stream_stream_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{15}
}

func (x *Stream) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stream) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Stream) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

func (x *Stream) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Stream) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Stream) GetStatus() StreamStatus {
	if x != nil {
		return x.Status
	}
	return StreamStatus_STREAM_PENDING
}

func (x *Stream) GetStartedAt() *common.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Stream) GetEndedAt() *common.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *Stream) GetDurationSeconds() int64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *Stream) GetViewerCount() int64 {
	if x != nil {
		return x.ViewerCount
	}
	return 0
}

func (x *Stream) GetRecordingUrl() string {
	if x != nil {
		return x.RecordingUrl
	}
	return ""
}

func (x *Stream) GetMetadata() *StreamMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Stream) GetCreatedAt() *common.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Stream) GetUpdatedAt() *common.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type StreamMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resolution    string                 `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Bitrate       int32                  `protobuf:"varint,2,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Fps           int32                  `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`
	Codec         string                 `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`
	ClientIp      string                 `protobuf:"bytes,5,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	AppName       string                 `protobuf:"bytes,6,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	CustomData    map[string]string      `protobuf:"bytes,7,rep,name=custom_data,json=customData,proto3" json:"custom_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetadata) Reset() {
	*x = StreamMetadata{}
	mi := &file_stream_stream_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetadata) ProtoMessage() {}

func (x *StreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetadata.ProtoReflect.Descriptor instead.
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return file_stream_stream_service_proto_rawDescGZIP(), []int{16}
}

func (x *StreamMetadata) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *StreamMetadata) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *StreamMetadata) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *StreamMetadata) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *StreamMetadata) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *StreamMetadata) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *StreamMetadata) GetCustomData() map[string]string {
	if x != nil {
		return x.CustomData
	}
	return nil
}

var File_stream_stream_service_proto protoreflect.FileDescriptor

const file_stream_stream_service_proto_rawDesc = "" +
	"\n" +
	"\x1bstream/stream_service.proto\x12\x06stream\x1a\x13common/common.proto\x1a\x16common/timestamp.proto\"s\n" +
	"\x18ValidateStreamKeyRequest\x12\x1d\n" +
	"\n" +
	"stream_key\x18\x01 \x01(\tR\tstreamKey\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tR\tipAddress\x12\x19\n" +
	"\bapp_name\x18\x03 \x01(\tR\aappName\"\xd0\x01\n" +
	"\x19ValidateStreamKeyResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12\x19\n" +
	"\bis_valid\x18\x02 \x01(\bR\aisValid\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12;\n" +
	"\vpermissions\x18\x05 \x01(\v2\x19.stream.StreamPermissionsR\vpermissions\"\xa4\x01\n" +
	"\x11StreamPermissions\x12\x1d\n" +
	"\n" +
	"can_stream\x18\x01 \x01(\bR\tcanStream\x12\x1d\n" +
	"\n" +
	"can_record\x18\x02 \x01(\bR\tcanRecord\x12\x1f\n" +
	"\vmax_bitrate\x18\x03 \x01(\x05R\n" +
	"maxBitrate\x120\n" +
	"\x14max_duration_minutes\x18\x04 \x01(\x05R\x12maxDurationMinutes\"\xb9\x01\n" +
	"\x13CreateStreamRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1d\n" +
	"\n" +
	"stream_key\x18\x02 \x01(\tR\tstreamKey\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x122\n" +
	"\bmetadata\x18\x05 \x01(\v2\x16.stream.StreamMetadataR\bmetadata\"\x83\x01\n" +
	"\x14CreateStreamResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\tR\bstreamId\x12&\n" +
	"\x06stream\x18\x03 \x01(\v2\x0e.stream.StreamR\x06stream\"\xe2\x01\n" +
	"\x13UpdateStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12,\n" +
	"\x06status\x18\x02 \x01(\x0e2\x14.stream.StreamStatusR\x06status\x122\n" +
	"\bmetadata\x18\x03 \x01(\v2\x16.stream.StreamMetadataR\bmetadata\x12!\n" +
	"\fviewer_count\x18\x04 \x01(\x03R\vviewerCount\x12)\n" +
	"\x10duration_seconds\x18\x05 \x01(\x03R\x0fdurationSeconds\"f\n" +
	"\x14UpdateStreamResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12&\n" +
	"\x06stream\x18\x02 \x01(\v2\x0e.stream.StreamR\x06stream\"/\n" +
	"\x10GetStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\"c\n" +
	"\x11GetStreamResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12&\n" +
	"\x06stream\x18\x02 \x01(\v2\x0e.stream.StreamR\x06stream\"G\n" +
	"\x17GetActiveStreamsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\"\xae\x01\n" +
	"\x18GetActiveStreamsResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12(\n" +
	"\astreams\x18\x02 \x03(\v2\x0e.stream.StreamR\astreams\x12\x1f\n" +
	"\vnext_cursor\x18\x03 \x01(\tR\n" +
	"nextCursor\x12\x1f\n" +
	"\vtotal_count\x18\x04 \x01(\x05R\n" +
	"totalCount\"\x81\x01\n" +
	"\x10EndStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12)\n" +
	"\x10duration_seconds\x18\x02 \x01(\x03R\x0fdurationSeconds\x12%\n" +
	"\x0erecording_path\x18\x03 \x01(\tR\rrecordingPath\";\n" +
	"\x11EndStreamResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\"\xb2\x01\n" +
	"\x19RecordingCompletedRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12%\n" +
	"\x0erecording_path\x18\x02 \x01(\tR\rrecordingPath\x12&\n" +
	"\x0ffile_size_bytes\x18\x03 \x01(\x03R\rfileSizeBytes\x12)\n" +
	"\x10duration_seconds\x18\x04 \x01(\x03R\x0fdurationSeconds\"i\n" +
	"\x1aRecordingCompletedResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.common.StatusR\x06status\x12#\n" +
	"\rrecording_url\x18\x02 \x01(\tR\frecordingUrl\"\xa1\x04\n" +
	"\x06Stream\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x1d\n" +
	"\n" +
	"stream_key\x18\x03 \x01(\tR\tstreamKey\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12,\n" +
	"\x06status\x18\x06 \x01(\x0e2\x14.stream.StreamStatusR\x06status\x120\n" +
	"\n" +
	"started_at\x18\a \x01(\v2\x11.common.TimestampR\tstartedAt\x12,\n" +
	"\bended_at\x18\b \x01(\v2\x11.common.TimestampR\aendedAt\x12)\n" +
	"\x10duration_seconds\x18\t \x01(\x03R\x0fdurationSeconds\x12!\n" +
	"\fviewer_count\x18\n" +
	" \x01(\x03R\vviewerCount\x12#\n" +
	"\rrecording_url\x18\v \x01(\tR\frecordingUrl\x122\n" +
	"\bmetadata\x18\f \x01(\v2\x16.stream.StreamMetadataR\bmetadata\x120\n" +
	"\n" +
	"created_at\x18\r \x01(\v2\x11.common.TimestampR\tcreatedAt\x120\n" +
	"\n" +
	"updated_at\x18\x0e \x01(\v2\x11.common.TimestampR\tupdatedAt\"\xb2\x02\n" +
	"\x0eStreamMetadata\x12\x1e\n" +
	"\n" +
	"resolution\x18\x01 \x01(\tR\n" +
	"resolution\x12\x18\n" +
	"\abitrate\x18\x02 \x01(\x05R\abitrate\x12\x10\n" +
	"\x03fps\x18\x03 \x01(\x05R\x03fps\x12\x14\n" +
	"\x05codec\x18\x04 \x01(\tR\x05codec\x12\x1b\n" +
	"\tclient_ip\x18\x05 \x01(\tR\bclientIp\x12\x19\n" +
	"\bapp_name\x18\x06 \x01(\tR\aappName\x12G\n" +
	"\vcustom_data\x18\a \x03(\v2&.stream.StreamMetadata.CustomDataEntryR\n" +
	"customData\x1a=\n" +
	"\x0fCustomDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*j\n" +
	"\fStreamStatus\x12\x12\n" +
	"\x0eSTREAM_PENDING\x10\x00\x12\x0f\n" +
	"\vSTREAM_LIVE\x10\x01\x12\x10\n" +
	"\fSTREAM_ENDED\x10\x02\x12\x10\n" +
	"\fSTREAM_ERROR\x10\x03\x12\x11\n" +
	"\rSTREAM_PAUSED\x10\x042\xb7\x04\n" +
	"\rStreamService\x12X\n" +
	"\x11ValidateStreamKey\x12 .stream.ValidateStreamKeyRequest\x1a!.stream.ValidateStreamKeyResponse\x12I\n" +
	"\fCreateStream\x12\x1b.stream.CreateStreamRequest\x1a\x1c.stream.CreateStreamResponse\x12I\n" +
	"\fUpdateStream\x12\x1b.stream.UpdateStreamRequest\x1a\x1c.stream.UpdateStreamResponse\x12@\n" +
	"\tGetStream\x12\x18.stream.GetStreamRequest\x1a\x19.stream.GetStreamResponse\x12U\n" +
	"\x10GetActiveStreams\x12\x1f.stream.GetActiveStreamsRequest\x1a .stream.GetActiveStreamsResponse\x12@\n" +
	"\tEndStream\x12\x18.stream.EndStreamRequest\x1a\x19.stream.EndStreamResponse\x12[\n" +
	"\x12RecordingCompleted\x12!.stream.RecordingCompletedRequest\x1a\".stream.RecordingCompletedResponseB\xc2\x01\n" +
	"\n" +
	"com.streamB\x12StreamServiceProtoP\x01Zhgithub.com/Saoudyahya/Live-Streaming-Platform-Architecture/services/stream-management-service/gen/stream\xa2\x02\x03SXX\xaa\x02\x06Stream\xca\x02\x06Stream\xe2\x02\x12Stream\\GPBMetadata\xea\x02\x06Streamb\x06proto3"

var (
	file_stream_stream_service_proto_rawDescOnce sync.Once
	file_stream_stream_service_proto_rawDescData []byte
)

func file_stream_stream_service_proto_rawDescGZIP() []byte {
	file_stream_stream_service_proto_rawDescOnce.Do(func() {
		file_stream_stream_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_stream_service_proto_rawDesc), len(file_stream_stream_service_proto_rawDesc)))
	})
	return file_stream_stream_service_proto_rawDescData
}

var file_stream_stream_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stream_stream_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_stream_stream_service_proto_goTypes = []any{
	(StreamStatus)(0),                  // 0: stream.StreamStatus
	(*ValidateStreamKeyRequest)(nil),   // 1: stream.ValidateStreamKeyRequest
	(*ValidateStreamKeyResponse)(nil),  // 2: stream.ValidateStreamKeyResponse
	(*StreamPermissions)(nil),          // 3: stream.StreamPermissions
	(*CreateStreamRequest)(nil),        // 4: stream.CreateStreamRequest
	(*CreateStreamResponse)(nil),       // 5: stream.CreateStreamResponse
	(*UpdateStreamRequest)(nil),        // 6: stream.UpdateStreamRequest
	(*UpdateStreamResponse)(nil),       // 7: stream.UpdateStreamResponse
	(*GetStreamRequest)(nil),           // 8: stream.GetStreamRequest
	(*GetStreamResponse)(nil),          // 9: stream.GetStreamResponse
	(*GetActiveStreamsRequest)(nil),    // 10: stream.GetActiveStreamsRequest
	(*GetActiveStreamsResponse)(nil),   // 11: stream.GetActiveStreamsResponse
	(*EndStreamRequest)(nil),           // 12: stream.EndStreamRequest
	(*EndStreamResponse)(nil),          // 13: stream.EndStreamResponse
	(*RecordingCompletedRequest)(nil),  // 14: stream.RecordingCompletedRequest
	(*RecordingCompletedResponse)(nil), // 15: stream.RecordingCompletedResponse
	(*Stream)(nil),                     // 16: stream.Stream
	(*StreamMetadata)(nil),             // 17: stream.StreamMetadata
	nil,                                // 18: stream.StreamMetadata.CustomDataEntry
	(*common.Status)(nil),              // 19: common.Status
	(*common.Timestamp)(nil),           // 20: common.Timestamp
}
var file_stream_stream_service_proto_depIdxs = []int32{
	19, // 0: stream.ValidateStreamKeyResponse.status:type_name -> common.Status
	3,  // 1: stream.ValidateStreamKeyResponse.permissions:type_name -> stream.StreamPermissions
	17, // 2: stream.CreateStreamRequest.metadata:type_name -> stream.StreamMetadata
	19, // 3: stream.CreateStreamResponse.status:type_name -> common.Status
	16, // 4: stream.CreateStreamResponse.stream:type_name -> stream.Stream
	0,  // 5: stream.UpdateStreamRequest.status:type_name -> stream.StreamStatus
	17, // 6: stream.UpdateStreamRequest.metadata:type_name -> stream.StreamMetadata
	19, // 7: stream.UpdateStreamResponse.status:type_name -> common.Status
	16, // 8: stream.UpdateStreamResponse.stream:type_name -> stream.Stream
	19, // 9: stream.GetStreamResponse.status:type_name -> common.Status
	16, // 10: stream.GetStreamResponse.stream:type_name -> stream.Stream
	19, // 11: stream.GetActiveStreamsResponse.status:type_name -> common.Status
	16, // 12: stream.GetActiveStreamsResponse.streams:type_name -> stream.Stream
	19, // 13: stream.EndStreamResponse.status:type_name -> common.Status
	19, // 14: stream.RecordingCompletedResponse.status:type_name -> common.Status
	0,  // 15: stream.Stream.status:type_name -> stream.StreamStatus
	20, // 16: stream.Stream.started_at:type_name -> common.Timestamp
	20, // 17: stream.Stream.ended_at:type_name -> common.Timestamp
	17, // 18: stream.Stream.metadata:type_name -> stream.StreamMetadata
	20, // 19: stream.Stream.created_at:type_name -> common.Timestamp
	20, // 20: stream.Stream.updated_at:type_name -> common.Timestamp
	18, // 21: stream.StreamMetadata.custom_data:type_name -> stream.StreamMetadata.CustomDataEntry
	1,  // 22: stream.StreamService.ValidateStreamKey:input_type -> stream.ValidateStreamKeyRequest
	4,  // 23: stream.StreamService.CreateStream:input_type -> stream.CreateStreamRequest
	6,  // 24: stream.StreamService.UpdateStream:input_type -> stream.UpdateStreamRequest
	8,  // 25: stream.StreamService.GetStream:input_type -> stream.GetStreamRequest
	10, // 26: stream.StreamService.GetActiveStreams:input_type -> stream.GetActiveStreamsRequest
	12, // 27: stream.StreamService.EndStream:input_type -> stream.EndStreamRequest
	14, // 28: stream.StreamService.RecordingCompleted:input_type -> stream.RecordingCompletedRequest
	2,  // 29: stream.StreamService.ValidateStreamKey:output_type -> stream.ValidateStreamKeyResponse
	5,  // 30: stream.StreamService.CreateStream:output_type -> stream.CreateStreamResponse
	7,  // 31: stream.StreamService.UpdateStream:output_type -> stream.UpdateStreamResponse
	9,  // 32: stream.StreamService.GetStream:output_type -> stream.GetStreamResponse
	11, // 33: stream.StreamService.GetActiveStreams:output_type -> stream.GetActiveStreamsResponse
	13, // 34: stream.StreamService.EndStream:output_type -> stream.EndStreamResponse
	15, // 35: stream.StreamService.RecordingCompleted:output_type -> stream.RecordingCompletedResponse
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_stream_stream_service_proto_init() }
func file_stream_stream_service_proto_init() {
	if File_stream_stream_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_stream_service_proto_rawDesc), len(file_stream_stream_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_stream_service_proto_goTypes,
		DependencyIndexes: file_stream_stream_service_proto_depIdxs,
		EnumInfos:         file_stream_stream_service_proto_enumTypes,
		MessageInfos:      file_stream_stream_service_proto_msgTypes,
	}.Build()
	File_stream_stream_service_proto = out.File
	file_stream_stream_service_proto_goTypes = nil
	file_stream_stream_service_proto_depIdxs = nil
}
