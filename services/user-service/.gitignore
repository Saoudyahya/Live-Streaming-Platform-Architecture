# ============================================
# USER SERVICE .GITIGNORE
# ============================================

# ============================================
# SECRETS & ENVIRONMENT
# ============================================
.env
.env.local
.env.*.local
.env.development
.env.staging
.env.production
*.env

# Environment variables
.envrc

# ============================================
# PYTHON
# ============================================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ============================================
# FASTAPI / UVICORN
# ============================================
# FastAPI specific
.fastapi/

# Uvicorn logs
uvicorn.log

# ============================================
# DATABASE
# ============================================
# SQLite databases
*.db
*.sqlite
*.sqlite3

# Database dumps
*.sql
*.dump

# PostgreSQL
*.pgsql

# Alembic
# Keep alembic.ini and versions/ but ignore stamps
alembic/versions/*.pyc
alembic/versions/__pycache__/

# Database migration backups
*.backup

# ============================================
# AWS & DEPLOYMENT
# ============================================
# AWS credentials
.aws/
aws-credentials.json
*.pem
*.key

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Docker
.docker/
docker-compose.override.yml
.dockerignore.local

# Kubernetes
*.kubeconfig

# ============================================
# IDE & EDITORS
# ============================================
# VSCode
.vscode/
*.code-workspace

# PyCharm
.idea/
*.iws
*.iml
*.ipr

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*~
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Atom
.atom/

# ============================================
# OPERATING SYSTEM
# ============================================
# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ============================================
# LOGS & MONITORING
# ============================================
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# ============================================
# SECURITY & CERTIFICATES
# ============================================
# SSL certificates
*.crt
*.cert
*.cer
*.p12
*.pfx
*.key
*.pem

# GPG keys
secring.*

# ============================================
# TEMPORARY & CACHE
# ============================================
# Temporary files
tmp/
temp/
cache/
.cache/
.tmp/

# Node modules (if using any JS tooling)
node_modules/

# ============================================
# PROJECT SPECIFIC
# ============================================
# Local configuration
local_config.py
config_local.py

# Test databases
test.db
test_*.db

# Upload directories
uploads/
media/
static/collected-static/

# Documentation builds
docs/build/
docs/_build/

# Backup files
*.bak
*.backup
*.old

# Local development scripts
run_local.sh
setup_local.sh

# Redis dump (if using Redis locally)
dump.rdb

# ============================================
# DEPENDENCIES & PACKAGES
# ============================================
# Package lock files (keep requirements.txt but ignore locks)
package-lock.json
yarn.lock

# Conda
.conda/

# ============================================
# MONITORING & PROFILING
# ============================================
# Profiling
*.prof
.prof/

# Coverage
.coverage.*
coverage/

# ============================================
# MISC
# ============================================
# General
.scratch/
TODO.txt
NOTES.txt
.notes/

# Archives
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Compiled files
*.com
*.class
*.dll
*.exe
*.o
*.so