# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stream import stream_service_pb2 as stream_dot_stream__service__pb2


class StreamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ValidateStreamKey = channel.unary_unary(
                '/stream.StreamService/ValidateStreamKey',
                request_serializer=stream_dot_stream__service__pb2.ValidateStreamKeyRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.ValidateStreamKeyResponse.FromString,
                _registered_method=True)
        self.CreateStream = channel.unary_unary(
                '/stream.StreamService/CreateStream',
                request_serializer=stream_dot_stream__service__pb2.CreateStreamRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.CreateStreamResponse.FromString,
                _registered_method=True)
        self.UpdateStream = channel.unary_unary(
                '/stream.StreamService/UpdateStream',
                request_serializer=stream_dot_stream__service__pb2.UpdateStreamRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.UpdateStreamResponse.FromString,
                _registered_method=True)
        self.GetStream = channel.unary_unary(
                '/stream.StreamService/GetStream',
                request_serializer=stream_dot_stream__service__pb2.GetStreamRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.GetStreamResponse.FromString,
                _registered_method=True)
        self.GetActiveStreams = channel.unary_unary(
                '/stream.StreamService/GetActiveStreams',
                request_serializer=stream_dot_stream__service__pb2.GetActiveStreamsRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.GetActiveStreamsResponse.FromString,
                _registered_method=True)
        self.EndStream = channel.unary_unary(
                '/stream.StreamService/EndStream',
                request_serializer=stream_dot_stream__service__pb2.EndStreamRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.EndStreamResponse.FromString,
                _registered_method=True)
        self.RecordingCompleted = channel.unary_unary(
                '/stream.StreamService/RecordingCompleted',
                request_serializer=stream_dot_stream__service__pb2.RecordingCompletedRequest.SerializeToString,
                response_deserializer=stream_dot_stream__service__pb2.RecordingCompletedResponse.FromString,
                _registered_method=True)


class StreamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ValidateStreamKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveStreams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordingCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ValidateStreamKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateStreamKey,
                    request_deserializer=stream_dot_stream__service__pb2.ValidateStreamKeyRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.ValidateStreamKeyResponse.SerializeToString,
            ),
            'CreateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStream,
                    request_deserializer=stream_dot_stream__service__pb2.CreateStreamRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.CreateStreamResponse.SerializeToString,
            ),
            'UpdateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStream,
                    request_deserializer=stream_dot_stream__service__pb2.UpdateStreamRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.UpdateStreamResponse.SerializeToString,
            ),
            'GetStream': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStream,
                    request_deserializer=stream_dot_stream__service__pb2.GetStreamRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.GetStreamResponse.SerializeToString,
            ),
            'GetActiveStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveStreams,
                    request_deserializer=stream_dot_stream__service__pb2.GetActiveStreamsRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.GetActiveStreamsResponse.SerializeToString,
            ),
            'EndStream': grpc.unary_unary_rpc_method_handler(
                    servicer.EndStream,
                    request_deserializer=stream_dot_stream__service__pb2.EndStreamRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.EndStreamResponse.SerializeToString,
            ),
            'RecordingCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordingCompleted,
                    request_deserializer=stream_dot_stream__service__pb2.RecordingCompletedRequest.FromString,
                    response_serializer=stream_dot_stream__service__pb2.RecordingCompletedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stream.StreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('stream.StreamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ValidateStreamKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/ValidateStreamKey',
            stream_dot_stream__service__pb2.ValidateStreamKeyRequest.SerializeToString,
            stream_dot_stream__service__pb2.ValidateStreamKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/CreateStream',
            stream_dot_stream__service__pb2.CreateStreamRequest.SerializeToString,
            stream_dot_stream__service__pb2.CreateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/UpdateStream',
            stream_dot_stream__service__pb2.UpdateStreamRequest.SerializeToString,
            stream_dot_stream__service__pb2.UpdateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/GetStream',
            stream_dot_stream__service__pb2.GetStreamRequest.SerializeToString,
            stream_dot_stream__service__pb2.GetStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActiveStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/GetActiveStreams',
            stream_dot_stream__service__pb2.GetActiveStreamsRequest.SerializeToString,
            stream_dot_stream__service__pb2.GetActiveStreamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/EndStream',
            stream_dot_stream__service__pb2.EndStreamRequest.SerializeToString,
            stream_dot_stream__service__pb2.EndStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordingCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stream.StreamService/RecordingCompleted',
            stream_dot_stream__service__pb2.RecordingCompletedRequest.SerializeToString,
            stream_dot_stream__service__pb2.RecordingCompletedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
